'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign2 = require('babel-runtime/core-js/object/assign')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = parseArgs;
function type(value) {
  return typeof value === 'boolean' ? Boolean : typeof value === 'number' ? Number : typeof value === 'string' ? String : typeof value === 'function' ? Function : Array.isArray(value) ? Array : Object;
}

function matchSignature(args, variables, signature) {
  return signature.length === args.length && signature.every(function (name, i) {
    return variables[name] === type(args[i]);
  });
}

function findSignature(args, variables, signatures) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(signatures), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var signature = _step.value;

      if (matchSignature(args, variables, signature)) {
        return signature;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function parseArgs(args, variables) {
  for (var _len = arguments.length, signatures = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    signatures[_key - 2] = arguments[_key];
  }

  var signature = findSignature(args, variables, signatures);
  return signature ? signature.reduce(function (parsedArgs, name, i) {
    return _Object$assign2(parsedArgs, _defineProperty({}, name, args[i]));
  }, {}) : {};
}

module.exports = exports['default'];