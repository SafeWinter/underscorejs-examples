'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _es6Promise = require('es6-promise');

var _jasmineEs6LibPrivates = require('jasmine-es6/lib/privates');

var _jasmineEs6LibPrivates2 = _interopRequireDefault(_jasmineEs6LibPrivates);

var privates = new _jasmineEs6LibPrivates2['default']();

var _default = (function (_ES6Promise) {
  _inherits(_default, _ES6Promise);

  function _default() {
    _classCallCheck(this, _default);

    var resolve = undefined,
        reject = undefined,
        finish = undefined;
    _get(Object.getPrototypeOf(_default.prototype), 'constructor', this).call(this, function () {
      var _args, _args2;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_args = args, _args2 = _slicedToArray(_args, 2), resolve = _args2[0], reject = _args2[1], _args);
    });
    var finished = new _Promise(function () {
      var _args3, _args32;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_args3 = args, _args32 = _slicedToArray(_args3, 1), finish = _args32[0], _args3);
    });
    privates.set(this, { resolve: resolve, reject: reject, finish: finish, finished: finished, count: 0 });
  }

  _createClass(_default, [{
    key: 'resolve',
    value: function resolve() {
      var _privates$get = privates.get(this);

      var resolve = _privates$get.resolve;
      var finished = _privates$get.finished;

      resolve();
      return finished;
    }
  }, {
    key: 'acquire',
    value: function acquire() {
      var _privates$get2 = privates.get(this);

      var count = _privates$get2.count;

      count++;
      privates.assign(this, { count: count });
    }
  }, {
    key: 'release',
    value: function release() {
      var _privates$get3 = privates.get(this);

      var count = _privates$get3.count;
      var finish = _privates$get3.finish;

      count--;
      privates.assign(this, { count: count });
      if (count === 0) {
        finish();
      }
    }
  }, {
    key: 'then',
    value: function then(onFulfilled, onRejected) {
      var _this = this;

      this.acquire();
      return _get(Object.getPrototypeOf(_default.prototype), 'then', this).call(this, function (result) {
        onFulfilled(result);
        _this.release();
      }, onRejected);
    }
  }]);

  return _default;
})(_es6Promise.Promise);

exports['default'] = _default;
module.exports = exports['default'];