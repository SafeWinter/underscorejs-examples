'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = install;

var _jasmineEs6LibParseArgs = require('jasmine-es6/lib/parse-args');

var _jasmineEs6LibParseArgs2 = _interopRequireDefault(_jasmineEs6LibParseArgs);

var fnNames = ['beforeAll', 'afterAll', 'beforeEach', 'afterEach', 'it', 'fit'];

function wrap(jasmineFn) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _parseArgs = (0, _jasmineEs6LibParseArgs2['default'])(args, { title: String, callback: Function, timeout: Number }, ['title', 'callback'], ['title', 'callback', 'timeout'], ['callback'], ['callback', 'timeout']);

    var title = _parseArgs.title;
    var callback = _parseArgs.callback;
    var timeout = _parseArgs.timeout;

    if (callback.toString().includes('regeneratorRuntime.async')) {
      (function () {
        var oldCallback = callback;
        callback = function callee$3$0(done) {
          return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
              case 0:
                context$4$0.prev = 0;
                context$4$0.next = 3;
                return _regeneratorRuntime.awrap(oldCallback.call(this));

              case 3:
                done();
                context$4$0.next = 9;
                break;

              case 6:
                context$4$0.prev = 6;
                context$4$0.t0 = context$4$0['catch'](0);

                done.fail(context$4$0.t0);

              case 9:
              case 'end':
                return context$4$0.stop();
            }
          }, null, this, [[0, 6]]);
        };
      })();
    }

    return jasmineFn.apply(undefined, _toConsumableArray([title, callback, timeout].filter(Boolean)));
  };
}

var installed = false;

function install() {
  var env = arguments.length <= 0 || arguments[0] === undefined ? global : arguments[0];

  if (installed) {
    return;
  }
  installed = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(fnNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var fnName = _step.value;

      env[fnName] = wrap(env[fnName]);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

module.exports = exports['default'];